At the beginning of February 2012, it was decided that this portal should include data coming from:

- IFBL 1 & 2 projects
- Florabank (but only the checklists, we will have to filter the data source at import)

Data Import Workflow:
=====================

- Andre gave me one database already containing Original data from IFBL 1&2 (in raw, original form). This initial data is stored in : 00_initial_db_andre.sql.
- I then re-use and adapted other scripts by André, to import and filter data from Florabank, and then fill the application tables (under nbgb_ifbl schema).

As of February 15th 2012, this import process is working well.

So, the concrete data import and configuration workflow is:
===========================================================

1) Create a database manually: 

$ createdb ifbl_new


2) Execute all the SQL files in ordrer (you'll also need a the data source files)(these files are in the data folder... except floraBank DwcA (too big, download at inbo IPT) and andre original DB -> in 00_initial in this directory

$ psql -d ifbl_new < 00_initial_db_andre.sql (no external requirements, data is self-contained)
$ psql -d ifbl_new < 01_datacleaning_andre.sql (no external requirements)
$ psql -d ifbl_new < 02_florabank_load.sql (need the occurrences.txt coming from INBO ipt instances. Adapt path in script if necessary. Also adapt field order - due to IPT bug -!!)
($ tail -n +2 occurrence.txt.orig > occurrence.txt # to remove the titles from IPT file)

$ psql -d ifbl_new < 03_florabank_filter.sql
$ psql -d ifbl_new < 04_load_square_data.sql
$ psql -d ifbl_new < 05_create_app_schema.sql
$ psql -d ifbl_new < 06_copy_raw_to_app.sql

- Install postGIS in your DB (in a "gis" schema):
  a) create the schema manually
  b) run $ psql -d ifbl_new < /usr/local/share/postgis/contrib/postgis-1.5/postgis.sql nnoe -v schema=gis
  and $ psql -d ifbl_new < /usr/local/share/postgis/contrib/postgis-1.5/spatial_ref_sys.sql nnoe -v schema=gis
  NOTE: .psqlrc should contains: SET search_path TO :schema;

(At this point If you're doing a data update, simply rename the DB to the previous name, so you don't have to change the app/geoserver config)
- Run the application migrations (you'll need GeoWebApi)

!!! We have to check, because sometimes *part of migrations* seems not run, and I have to run the code manually ?!? (such as setting the has_direct_checklists flag on areas in Hdc) !!!

- Configure geoserver to access the DB (if you have different postgres schemas - for example for postgis - we have to create a specific user and execute something like "alter user myuser set search_path to mypostgisschema,public", because geoserver is not able to let us configure access to multiple schemas).


!!! We also have to load (manually or not) the date of the DwcA, to be published on the website0/

- Geoserver config !!!
1) publish "areas_4_derived_from_1" and "areas_with_direct_checklists" directly from the views (created by App migrations).
2) For the others layers ("squares_per_species_and_time" and "squares4_per_species_and_time"), we have to use the "SQL views" features of geoserver. Here is the config details:

NB: Take care when configuring Geoserver : SQL Views parameters (such as range_start and range_end) sometimes are messed up by the web interface
NB2: Sometimes geoserver fails because it tries to access some postgis table. The database should be configured so that the SEARCH PATH includes gis

For squares4_per_species_and_time, the config is  identic to squares_per_species_and_time, EXCEPT:
- name of the layer (of course)
- replace WHERE checklists.area3_id by WHERE checklists.area2_id

SQL Statement:
==============

SELECT areas.the_geom, areas.ifbl_code, count(*) AS nb_observations, observations.species_id
   FROM nbgb_ifbl.areas, nbgb_ifbl.checklists, nbgb_ifbl.observations
  WHERE checklists.area3_id = areas.id AND observations.checklist_id = checklists.id


AND ((checklists.begin_date, checklists.end_date) OVERLAPS (DATE '%range_start%', DATE '%range_end%')
)

  GROUP BY areas.ifbl_code, areas.the_geom, observations.species_id
  
SQL view parameters:
====================

range_start	1000-01-01	^\d\d\d\d-\d\d-\d\d$
range_end	70000-12-31	^\d\d\d\d-\d\d-\d\d$

Attributes:
===========

the_geom		Geometry	3857
ifbl_code		String			
nb_observations		Long
species_id		Integer

------------------------------------------------------------------------
You'll also have to configure STYLING in Geoserver: 

For square_per_species_and_time (2 layers)(name: ifbl_param):
-------------------------------------------------------------

<?xml version="1.0" encoding="ISO-8859-1"?>
<StyledLayerDescriptor version="1.0.0"
    xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
    xmlns="http://www.opengis.net/sld"
    xmlns:ogc="http://www.opengis.net/ogc"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <NamedLayer>
    <Name>Simple polygon</Name>
    <UserStyle>
      <Title>SLD Cook Book: Simple polygon</Title>
      <FeatureTypeStyle>
        <Rule>
          <PolygonSymbolizer>
            <Fill>
              <CssParameter name="fill">
                #<ogc:Function name="env">
                  <ogc:Literal>color</ogc:Literal>
                  <ogc:Literal>FF0000</ogc:Literal>
                </ogc:Function>
              </CssParameter>
	      <CssParameter name="fill-opacity">0.4</CssParameter>
            </Fill>
          </PolygonSymbolizer>
        </Rule>
      </FeatureTypeStyle>
    </UserStyle>
  </NamedLayer>
</StyledLayerDescriptor>

For area_ layers (name ifbl_noparam):
=====================================

<?xml version="1.0" encoding="ISO-8859-1"?>
<StyledLayerDescriptor version="1.0.0"
    xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
    xmlns="http://www.opengis.net/sld"
    xmlns:ogc="http://www.opengis.net/ogc"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <NamedLayer>
    <Name>Simple polygon</Name>
    <UserStyle>
      <Title>SLD Cook Book: Simple polygon</Title>
      <FeatureTypeStyle>
        <Rule>
          <PolygonSymbolizer>
            <Fill>
              <CssParameter name="fill">#338000</CssParameter>
              <CssParameter name="fill-opacity">0.4</CssParameter>
            </Fill>
            <Stroke>
               <CssParameter name="stroke">#000000</CssParameter>
               <CssParameter name="stroke-width">1</CssParameter>
             </Stroke>
          </PolygonSymbolizer>
        </Rule>
      </FeatureTypeStyle>
    </UserStyle>
  </NamedLayer>
</StyledLayerDescriptor>

We also have to create a distinc style named ifbl_param_print (and make it available - NOT AS DEFAULT - to squares_per_species_and_time AND squares4_per_species_and_time):
=> content of style: idem to ifbl_param but with the opacity at 1 instead of 0.4.


Layouts:
========

In geoserver data dir, we should also create a "layouts" directory containing two files:

ifbl_print_w_ecoregions.xml:

<layout>
    <decoration type="image" affinity="bottom,left" offset="36,36">
        <option name="url" value="http://home.bebif.be/ifbl/images/bbpf_logo.png"/>
    </decoration>
    <decoration type="image" affinity="bottom,left" offset="36,200">
        <option name="url" value="http://home.bebif.be/ifbl/images/ecoregion_legend.png"/>
    </decoration>
</layout>

ifbl_print:
===========

Idem, but without the second (ecoregion) "decoration" block

Style: ifbl_print_background:
<?xml version="1.0" encoding="ISO-8859-1"?>
<StyledLayerDescriptor version="1.0.0"
 xsi:schemaLocation="http://www.opengis.net/sld StyledLayerDescriptor.xsd"
 xmlns="http://www.opengis.net/sld"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<!-- a Named Layer is the basic building block of an SLD document -->
<NamedLayer>
<Name>default_polygon</Name>
<UserStyle>
<!-- Styles can have names, titles and abstracts -->
<Title>Default Polygon</Title>
<Abstract>A sample style that draws a polygon</Abstract>
<!-- FeatureTypeStyles describe how to render different features -->
<!-- A FeatureTypeStyle for rendering polygons -->
<FeatureTypeStyle>
<Rule>
<Name>rule1</Name>
<Title>Gray Polygon with Black Outline</Title>
<Abstract>A polygon with a gray fill and a 1 pixel black outline</Abstract>
<PolygonSymbolizer>
<Fill>
<CssParameter name="fill">#FFFFFF</CssParameter>
</Fill>
<Stroke>
<CssParameter name="stroke">#A65500</CssParameter>
<CssParameter name="stroke-width">2</CssParameter>
</Stroke>
</PolygonSymbolizer>
</Rule>
</FeatureTypeStyle>
</UserStyle>
</NamedLayer>
</StyledLayerDescriptor>




